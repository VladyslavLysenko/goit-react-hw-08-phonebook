{"version":3,"file":"static/js/136.14772c90.chunk.js","mappings":"sNAEIA,EAAY,YAgFT,IAAIC,EAAuB,SAA8BC,EAAGC,GACjE,OAAOD,IAAMC,CACd,EAqBM,SAASC,EAAeC,EAAMC,GACnC,IAAIC,EAAoD,kBAA3BD,EAAsCA,EAAyB,CAC1FE,cAAeF,GAEbG,EAAwBF,EAAgBC,cACxCA,OAA0C,IAA1BC,EAAmCR,EAAuBQ,EAC1EC,EAAwBH,EAAgBI,QACxCA,OAAoC,IAA1BD,EAAmC,EAAIA,EACjDE,EAAsBL,EAAgBK,oBACtCC,EA7BC,SAAkCL,GACvC,OAAO,SAAoCM,EAAMC,GAC/C,GAAa,OAATD,GAA0B,OAATC,GAAiBD,EAAKE,SAAWD,EAAKC,OACzD,OAAO,EAMT,IAFA,IAAIA,EAASF,EAAKE,OAETC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,IAAKT,EAAcM,EAAKG,GAAIF,EAAKE,IAC/B,OAAO,EAIX,OAAO,CACR,CACF,CAYkBC,CAAyBV,GACtCW,EAAoB,IAAZR,EA/Gd,SAA8BS,GAC5B,IAAIC,EACJ,MAAO,CACLC,IAAK,SAAaC,GAChB,OAAIF,GAASD,EAAOC,EAAME,IAAKA,GACtBF,EAAMG,MAGRxB,CACR,EACDyB,IAAK,SAAaF,EAAKC,GACrBH,EAAQ,CACNE,IAAKA,EACLC,MAAOA,EAEV,EACDE,WAAY,WACV,OAAOL,EAAQ,CAACA,GAAS,EAC1B,EACDM,MAAO,WACLN,OAAQO,CACT,EAEJ,CAwF6BC,CAAqBhB,GAtFnD,SAAwBF,EAASS,GAC/B,IAAIU,EAAU,GAEd,SAASR,EAAIC,GACX,IAAIQ,EAAaD,EAAQE,WAAU,SAAUX,GAC3C,OAAOD,EAAOG,EAAKF,EAAME,IAC1B,IAED,GAAIQ,GAAc,EAAG,CACnB,IAAIV,EAAQS,EAAQC,GAOpB,OALIA,EAAa,IACfD,EAAQG,OAAOF,EAAY,GAC3BD,EAAQI,QAAQb,IAGXA,EAAMG,KACd,CAGD,OAAOxB,CACR,CAwBD,MAAO,CACLsB,IAAKA,EACLG,IAxBF,SAAaF,EAAKC,GACZF,EAAIC,KAASvB,IAEf8B,EAAQI,QAAQ,CACdX,IAAKA,EACLC,MAAOA,IAGLM,EAAQd,OAASL,GACnBmB,EAAQK,MAGb,EAaCT,WAXF,WACE,OAAOI,CACR,EAUCH,MARF,WACEG,EAAU,EACX,EAQF,CAmCgEM,CAAezB,EAASE,GAEvF,SAASwB,IACP,IAAIb,EAAQL,EAAMG,IAAIgB,WAEtB,GAAId,IAAUxB,EAAW,CAIvB,GAFAwB,EAAQnB,EAAKkC,MAAM,KAAMD,WAErB1B,EAAqB,CACvB,IAAIkB,EAAUX,EAAMO,aAChBc,EAAgBV,EAAQW,MAAK,SAAUpB,GACzC,OAAOT,EAAoBS,EAAMG,MAAOA,EACzC,IAEGgB,IACFhB,EAAQgB,EAAchB,MAEzB,CAEDL,EAAMM,IAAIa,UAAWd,EACtB,CAED,OAAOA,CACR,CAMD,OAJAa,EAASK,WAAa,WACpB,OAAOvB,EAAMQ,OACd,EAEMU,CACR,CC/ID,SAASM,EAAgBC,GACvB,IAAIC,EAAeC,MAAMC,QAAQH,EAAM,IAAMA,EAAM,GAAKA,EAExD,IAAKC,EAAaG,OAAM,SAAUC,GAChC,MAAsB,oBAARA,CACf,IAAG,CACF,IAAIC,EAAkBL,EAAaM,KAAI,SAAUF,GAC/C,MAAsB,oBAARA,EAAqB,aAAeA,EAAIG,MAAQ,WAAa,YAAcH,CAC1F,IAAEI,KAAK,MACR,MAAM,IAAIC,MAAM,kGAAoGJ,EAAkB,IACvI,CAED,OAAOL,CACR,CAEM,SAASU,EAAsBC,GACpC,IAAK,IAAIC,EAAOnB,UAAUtB,OAAQ0C,EAAyB,IAAIZ,MAAMW,EAAO,EAAIA,EAAO,EAAI,GAAIE,EAAO,EAAGA,EAAOF,EAAME,IACpHD,EAAuBC,EAAO,GAAKrB,UAAUqB,GAG/C,IAAIC,EAAiB,WACnB,IAAK,IAAIC,EAAQvB,UAAUtB,OAAQ4B,EAAQ,IAAIE,MAAMe,GAAQC,EAAQ,EAAGA,EAAQD,EAAOC,IACrFlB,EAAMkB,GAASxB,UAAUwB,GAG3B,IAEIC,EAFAC,EAAkB,EAOlBC,EAAwB,CAC1BC,oBAAgBtC,GAGduC,EAAavB,EAAMT,MAQvB,GAN0B,kBAAfgC,IACTF,EAAwBE,EAExBA,EAAavB,EAAMT,OAGK,oBAAfgC,EACT,MAAM,IAAIb,MAAM,qFAAuFa,EAAa,KAKtH,IAAIC,EAAwBH,EACxBI,EAAyBD,EAAsBF,eAC/CA,OAA4C,IAA3BG,EAAoCX,EAAyBW,EAM9EC,EAAsBxB,MAAMC,QAAQmB,GAAkBA,EAAiB,CAACA,GACxErB,EAAeF,EAAgBC,GAC/B2B,EAAqBf,EAAQjB,WAAM,EAAQ,CAAC,WAG9C,OAFAyB,IAEOG,EAAW5B,MAAM,KAAMD,UAC/B,GAAEkC,OAAOF,IAENG,EAAWjB,GAAQ,WAIrB,IAHA,IAAIkB,EAAS,GACT1D,EAAS6B,EAAa7B,OAEjBC,EAAI,EAAGA,EAAID,EAAQC,IAG1ByD,EAAOC,KAAK9B,EAAa5B,GAAGsB,MAAM,KAAMD,YAK1C,OADAyB,EAAcQ,EAAmBhC,MAAM,KAAMmC,EAE9C,IAeD,OAdAE,OAAOC,OAAOJ,EAAU,CACtBN,WAAYA,EACZI,mBAAoBA,EACpB1B,aAAcA,EACdiC,WAAY,WACV,OAAOf,CACR,EACDgB,eAAgB,WACd,OAAOf,CACR,EACDgB,oBAAqB,WACnB,OAAOhB,EAAkB,CAC1B,IAEIS,CACR,EAGD,OAAOb,CACR,CACM,I,oBAAIA,EAAgCL,EAAsBnD,GCrGpD6E,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEnBC,EAAe,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAGpBC,EAAqB3B,EAEhC,CANuB,SAAAsB,GAAK,OAAIA,EAAMM,OAAV,EAMhBP,IAEZ,SAACQ,EAAQL,GACP,IAAMM,EAAmBD,EAAOE,cAChC,OAAOP,EAAMK,QAAO,SAAAG,GAAO,OACzBA,EAAQxC,KAAKuC,cAAcE,SAASH,EADX,GAG5B,I,mBCdUI,EAAcC,EAAAA,GAAAA,GAAH,mNAWXC,EAAOD,EAAAA,GAAAA,GAAH,sBAEJE,EAAUF,EAAAA,GAAAA,IAAH,8BAChB,IAGSG,EAAaH,EAAAA,GAAAA,OAAH,6hB,mBCdVI,EAAc,SAAC,GAAuC,IAAD,IAApCP,QAAWQ,EAAyB,EAAzBA,GAAIhD,EAAqB,EAArBA,KAAMiD,EAAe,EAAfA,OAC3CC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,+BACE,UAACN,EAAD,YACE,4BACG7C,EADH,IACUiD,MAEV,SAACH,EAAD,CAAYM,KAAK,SAASC,QARX,kBAAMH,GAASI,EAAAA,EAAAA,IAAcN,GAA7B,EAQf,wBAMP,ECnBYO,EAAYZ,EAAAA,GAAAA,IAAH,2VAaTa,EAAYb,EAAAA,GAAAA,IAAH,gHAOTc,EAAcd,EAAAA,GAAAA,QAAH,wGAMXe,EAAef,EAAAA,GAAAA,OAAH,ugBAgBZgB,EAAQhB,EAAAA,GAAAA,MAAH,scCrCLiB,EAAe,WAC1B,IAAMC,GAAkBC,EAAAA,EAAAA,IAAY3B,GAEpC,OACE,SAACqB,EAAD,WACE,SAACd,EAAD,UACGmB,EAAgB9D,KAAI,SAAAgE,GAAI,OACvB,SAACnB,EAAD,WACE,SAACG,EAAD,CAAaP,QAASuB,KADbA,EAAKf,GADO,OAQhC,E,UCfc,SAASgB,IACtB,IAAMd,GAAWC,EAAAA,EAAAA,MACbpB,GAAW+B,EAAAA,EAAAA,IAAYjC,GAE3B,GAAwBoC,EAAAA,EAAAA,UAAS,IAAjC,eAAOjE,EAAP,KAAakE,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOhB,EAAP,KAAekB,EAAf,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBtE,EAAR,EAAQA,KAAM5B,EAAd,EAAcA,MAEd,OAAQ4B,GACN,IAAK,OACHkE,EAAQ9F,GACR,MAEF,IAAK,SACH+F,EAAU/F,GACV,MAEF,QACE,OAEL,EAWKmG,EAAc,SAAAR,GAClB,IAAMS,EAAYzC,EAEfhC,KAAI,SAAAgE,GAAI,OAAIA,EAAK/D,KAAKuC,aAAd,IACRkC,MAAK,SAAAV,GAAI,OAAIA,IAAS/D,EAAKuC,aAAlB,IAEZ,OAAIiC,GACFE,OAAOC,MAAP,uBAA6B3E,EAA7B,sBACO,IAEP4E,QAAQC,IAAI7E,EAAMiD,GAClBC,GAAS4B,EAAAA,EAAAA,IAAW,CAAE9E,KAAAA,EAAMiD,OAAAA,MACrB,EAEV,EAED,OACE,kBAAM8B,SA1Bc,SAAAC,GACpBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,cACHZ,EAAY,CAAEvE,KAAAA,EAAMiD,OAAAA,KAEhCiC,EAAKE,OAER,EAmBC,WACE,SAAC3B,EAAD,WACE,SAACD,EAAD,WACE,qCAEE,SAACG,EAAD,CACE0B,SAAUjB,EACVhB,KAAK,OACLpD,KAAK,OACLsF,YAAY,mBACZC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,YAKhB,SAAChC,EAAD,WACE,SAACD,EAAD,WACE,uCAEE,SAACG,EAAD,CACE0B,SAAUjB,EACVhB,KAAK,MACLpD,KAAK,SACLsF,YAAY,qBACZC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,YAKhB,SAAC/B,EAAD,CAAcN,KAAK,SAAnB,0BACA,qBAGL,CC3FM,I,EAAMsC,EAAQ/C,EAAAA,GAAAA,GAAH,sjBCELgD,EAAU,SAAC,GAAyB,IAAvBH,EAAsB,EAAtBA,MAAOI,EAAe,EAAfA,SAC/B,OACE,+BACGJ,IAAS,SAACE,EAAD,UAAQF,IACjBI,IAGN,E,UCgBD,EAvBsB,WACpB,IAAM1C,GAAWC,EAAAA,EAAAA,MAKjB,OACE,SAACK,EAAD,WACE,SAACC,EAAD,WACE,sDAEE,SAACE,EAAD,CACE3D,KAAK,SACLqF,SAAU,SAAAL,GAAG,OAXN5G,EAWmB4G,EAAIG,cAAc/G,WAVpD8E,GAAS2C,EAAAA,EAAAA,GAAUzH,IADJ,IAAAA,CAWM,EACbgF,KAAK,OACLkC,YAAY,4BAMvB,ECvBYQ,GAAcC,EAAAA,EAAAA,IAAH,+oBCUT,SAASC,IACtB,IAAM9C,GAAWC,EAAAA,EAAAA,MACXjB,GAAY4B,EAAAA,EAAAA,IAAY7B,GAM9B,OAJAgE,EAAAA,EAAAA,YAAU,WACR/C,GAASgD,EAAAA,EAAAA,MACV,GAAE,CAAChD,KAGF,iCACE,SAACiD,EAAA,EAAD,WACE,gDAGF,SAAC5C,EAAD,WACE,SAACoC,EAAD,CAASH,MAAM,YAAf,UACE,SAACxB,EAAD,SAGJ,SAACT,EAAD,WACE,UAACoC,EAAD,CAASH,MAAM,WAAf,WACE,SAAC,EAAD,IACCtD,IAAa,mDACd,SAAC0B,EAAD,UAGJ,SAACkC,EAAD,MAGL,C","sources":["../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/Contacts/Contacts.styled.js","components/Contacts/ContactItem.js","components/Form/Form.styled.js","components/Contacts/ContactsList.js","components/Form/Form.js","components/Section/Section.styled.js","components/Section/Section.js","components/Filter/Filter.js","GlobalStyle.js","pages/Contacts.js"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filters;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = createSelector(\n  // Массив входных селекторов\n  [getFilter, getContacts],\n  // Функция преобразователь\n  (filter, items) => {\n    const normalizedFilter = filter.toLowerCase();\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const ContactList = styled.ul`\n  font: normal 20px 'Bitter', serif;\n  color: #2a88ad;\n  margin-bottom: 5px;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: flex-end;\n  gap: 10px;\n`;\n\nexport const Item = styled.li``;\n\nexport const Wrapper = styled.div`\n  ${'' /* display: 'flex'; */}\n`;\n\nexport const ContactBtn = styled.button`\n  background: #2a88ad;\n  padding: 8px 20px 8px 20px;\n  border-radius: 5px;\n  -webkit-0border-radius: 5px;\n  -moz-border-radius: 5px;\n  color: #fff;\n  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.12);\n  font: normal 30px 'Bitter', serif;\n  -moz-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  -webkit-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  border: 1px solid #257c9e;\n  font-size: 8px;\n  margin-left: 15px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ContactBtn, Wrapper } from './Contacts.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nexport const ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <Wrapper>\n        <span>\n          {name}:{number}\n        </span>\n        <ContactBtn type=\"button\" onClick={handleDelete}>\n          Delete\n        </ContactBtn>\n      </Wrapper>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const CommonBox = styled.div`\n  width: 450px;\n  padding: 30px;\n  margin: 40px auto;\n  background: #fff;\n  border-radius: 10px;\n  -webkit-border-radius: 10px;\n  -moz-border-radius: 10px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.13);\n  -moz-box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.13);\n  -webkit-box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.13);\n`;\n\nexport const InnerWrap = styled.div`\n  padding: 5px;\n  background: #f8f8f8;\n  border-radius: 6px;\n  margin-bottom: 15px;\n`;\n\nexport const SectionForm = styled.section`\n  font: normal 20px 'Bitter', serif;\n  color: #2a88ad;\n  margin-bottom: 5px;\n`;\n\nexport const CommonButton = styled.button`\n  background: #2a88ad;\n  padding: 8px 20px 8px 20px;\n  border-radius: 5px;\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  color: #fff;\n  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.12);\n  font: normal 30px 'Bitter', serif;\n  -moz-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  -webkit-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  border: 1px solid #257c9e;\n  font-size: 15px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  width: 100%;\n  padding: 8px;\n  border-radius: 6px;\n  -webkit-border-radius: 6px;\n  -moz-border-radius: 6px;\n  border: 2px solid #fff;\n  box-shadow: inset 0px 1px 1px rgba(0, 0, 0, 0.33);\n  -moz-box-shadow: inset 0px 1px 1px rgba(0, 0, 0, 0.33);\n  -webkit-box-shadow: inset 0px 1px 1px rgba(0, 0, 0, 0.33);\n`;\n","import React from 'react';\nimport { ContactItem } from './ContactItem';\nimport { InnerWrap } from '../Form/Form.styled';\nimport { ContactList, Item } from './Contacts.styled';\nimport { useSelector } from 'react-redux';\nimport { getVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  return (\n    <InnerWrap>\n      <ContactList>\n        {visibleContacts.map(item => (\n          <Item key={item.id}>\n            <ContactItem contact={item} />\n          </Item>\n        ))}\n      </ContactList>\n    </InnerWrap>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { InnerWrap, SectionForm, CommonButton, Input } from './Form.styled';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  let contacts = useSelector(getContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handlerSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    const saved = saveContact({ name, number });\n    if (saved) {\n      form.reset();\n    }\n  };\n\n  const saveContact = item => {\n    const checkName = contacts\n\n      .map(item => item.name.toLowerCase())\n      .some(item => item === name.toLowerCase());\n\n    if (checkName) {\n      window.alert(`This contact ${name} already excist `);\n      return false;\n    } else {\n      console.log(name, number);\n      dispatch(addContact({ name, number }));\n      return true;\n    }\n  };\n\n  return (\n    <form onSubmit={handlerSubmit}>\n      <SectionForm>\n        <InnerWrap>\n          <label>\n            Name\n            <Input\n              onChange={handleChange}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Add your name...\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </label>\n        </InnerWrap>\n      </SectionForm>\n      <SectionForm>\n        <InnerWrap>\n          <label>\n            Number\n            <Input\n              onChange={handleChange}\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Add your number...\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </label>\n        </InnerWrap>\n      </SectionForm>\n      <CommonButton type=\"submit\">Add contact</CommonButton>\n      <div />\n    </form>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  background: #2a88ad;\n  padding: 20px 30px 15px 30px;\n  margin: -30px -30px 30px -30px;\n  border-radius: 10px 10px 0 0;\n  -webkit-border-radius: 10px 10px 0 0;\n  -moz-border-radius: 10px 10px 0 0;\n  color: #fff;\n  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.12);\n  font: normal 30px 'Bitter', serif;\n  -moz-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  -webkit-box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  box-shadow: inset 0px 2px 2px 0px rgba(255, 255, 255, 0.17);\n  border: 1px solid #257c9e;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <section>\n      {title && <Title>{title}</Title>}\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import React from 'react';\nimport { Input, InnerWrap, SectionForm } from 'components/Form/Form.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const onChange = value => {\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <InnerWrap>\n      <SectionForm>\n        <label>\n          Find contacts by Name\n          <Input\n            name=\"filter\"\n            onChange={evt => onChange(evt.currentTarget.value)}\n            type=\"text\"\n            placeholder=\"Search contact...\"\n          />\n        </label>\n      </SectionForm>\n    </InnerWrap>\n  );\n};\n\nexport default Filter;\n","import { createGlobalStyle } from 'styled-components';\nimport 'modern-normalize';\nexport const GlobalStyle = createGlobalStyle`\n p,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n}\nul {\n  margin: 0;\n  padding-left: 0;\n  list-style: none;\n}\nbutton {\n  cursor: pointer;\n}\n.link {\n  text-decoration: none;\n}\nimg {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { ContactsList } from 'components/Contacts/ContactsList';\nimport ContactForm from '../components/Form/Form';\nimport { Section } from '../components/Section/Section';\nimport Filter from '../components/Filter/Filter';\nimport { GlobalStyle } from 'GlobalStyle';\nimport { CommonBox } from '../components/Form/Form.styled';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n\n      <CommonBox>\n        <Section title=\"Phonebook\">\n          <ContactForm />\n        </Section>\n      </CommonBox>\n      <CommonBox>\n        <Section title=\"Contacts\">\n          <Filter />\n          {isLoading && <b>Request in progress...</b>}\n          <ContactsList />\n        </Section>\n      </CommonBox>\n      <GlobalStyle />\n    </>\n  );\n}\n"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getContacts","state","contacts","items","getIsLoading","isLoading","getVisibleContacts","filters","filter","normalizedFilter","toLowerCase","contact","includes","ContactList","styled","Item","Wrapper","ContactBtn","ContactItem","id","number","dispatch","useDispatch","type","onClick","deleteContact","CommonBox","InnerWrap","SectionForm","CommonButton","Input","ContactsList","visibleContacts","useSelector","item","ContactForm","useState","setName","setNumber","handleChange","event","target","saveContact","checkName","some","window","alert","console","log","addContact","onSubmit","evt","preventDefault","form","currentTarget","reset","onChange","placeholder","pattern","title","required","Title","Section","children","setFilter","GlobalStyle","createGlobalStyle","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}